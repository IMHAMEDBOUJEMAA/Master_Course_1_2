*****************************************


import numpy as np 
import matplotlib.pyplot as plt 
from sklearn.datasets import make_blobs


*****************************************


X, y = make_blobs(n_samples=100, n_features=2, centers=2, random_state=0)
y = y.reshape((y.shape[0], 1))

print ('dimensions de X:', X.shape)
print ('dimensions de y:', y.shape)



plt.scatter(X[:,0], X[:, 1], c=y, cmap='summer')
plt.show()




**** création de la fonction d'initialisaion ****

	def initialisaion(X):
		w = np.random.randn(X.shape[1], 1)
		b = np.random.randn(1)
		return (w, b)
		
**** création de la fonction modéle ****

	def model(X, w, b):
		Z = X.dot(w) +b
		A = 1 / (1 + np.exp(-Z))
		return A
		
**** création de la fonction cout ****

	def log_loss(A, y):
		return 1 / len(y) * np.sum(-y * np.log(A) - (1 - y)* np.log(1 - A))
		
**** création de la fonction des gradients ****

	def gradients(A, X, y):
		dw = 1 / len(y) * np.dot(X.T, A - y)
		db = 1 / len(y) * np.sum(A - y)
		return (dw, db)
		
**** création de la fonction update ****

	def update(dw, db, w, b, learning_rate):
		w = w - learning_rate * dw
		b = b - learning_rate * db
		return(w, b)
		

**** création de la fonction predict ****

			def predict(X, w, b):
				A = model(X, w, b)
				print(A)
				return A >= 0.5
				
from sklearn.metrics import accuracy_score	
		
**** création de la fonction artificail_neuron ****

	def artificail_neuron(X, y, learning_rate = 0.1, n_iter = 100):
		# initialisaion w, b
		w, b = initialisaion(X)
		
		Loss = []
		
		for i in range(n_iter):
			A = model(X, w, b)
			Loss.append(log_loss(A, y))
			dw, db = gradients(A, X, y)
			w, b = update(dw, db, w, b, learning_rate)
			
		y_pred = predict(X, w, b)
		print(accuracy_score(y,y_pred))
		
		plt.plot(Loss)
		plt.show()
		
		
************************************************************	
	
		return (w, b)
		
		w, b = artificail_neuron(X, y)
		
		#artificail_neuron(X, y)
		
*************************************************************		
new_plants = np.array([2, 1])

# x0 = np.linspace(-1, 4, 100)
# x1 = ( -w[0] * x0 - b) / w[1]

plt.scatter(X[:,0], X[;, 1], c=y, cmap='summer')
plt.scatter(new_plants[0],new_plants[1], c='r')
# plt.plot(x0, x1, c='orange' , lw=3)
plt.show()
predict(new_plants, w, b)
# on peut voir ici si la plante est toxique ou non avec le pourcentage de probabilité de celli-ci *** True a 0.85


